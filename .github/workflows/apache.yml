name: Deploy Apache to Kubernetes

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Verify kubeconfig file
      run: |
        export KUBECONFIG=$HOME/.kube/config
        kubectl config view

    - name: List available contexts
      run: |
        export KUBECONFIG=$HOME/.kube/config
        kubectl config get-contexts

    - name: Set cluster context
      run: |
        export KUBECONFIG=$HOME/.kube/config
        kubectl config use-context kubernetes-admin@kubernetes

    - name: Verify cluster context
      run: |
        export KUBECONFIG=$HOME/.kube/config
        kubectl config current-context

    - name: Verify cluster endpoint
      run: |
        export KUBECONFIG=$HOME/.kube/config
        kubectl cluster-info

    - name: Create Argo CD namespace if not exists
      run: |
        export KUBECONFIG=$HOME/.kube/config
        kubectl get namespace argocd || kubectl create namespace argocd

    - name: Install Argo CD CRDs
      run: |
        export KUBECONFIG=$HOME/.kube/config
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

    - name: Create Argo CD Application for Apache
      run: |
        export KUBECONFIG=$HOME/.kube/config
        kubectl apply -f k8s/argo-application.yml --validate=false

    - name: Install Argo CD CLI
      run: |
        curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x /usr/local/bin/argocd

    - name: Sync Argo CD Application
      run: |
        export KUBECONFIG=$HOME/.kube/config
        kubectl -n argocd wait --for=condition=available --timeout=600s deployment/argocd-server
        kubectl port-forward svc/argocd-server -n argocd 8080:443 &
        sleep 10
        argocd login localhost:8080 --username admin --password $(kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 --decode) --insecure
        argocd app create apache --repo https://github.com/your-username/your-repo --path k8s/apache --dest-server https://kubernetes.default.svc --dest-namespace default --sync-policy automated
        argocd app sync apache